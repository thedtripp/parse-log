# from datetime import datetime
import logging
from typing import List, Dict
from get_cookies import CookieGetter

# Default variables
DATE_STRINGS = ["2018-12-08"]
LOG_FILE_NAME = "cookie_log.csv"

class CookieGetterExtended(CookieGetter):
    def __init__(self):
        logging.info("start")

    def least_active_cookie_from_date_list(self, log_file, date_strings, show_frequencies=False):
        try:
            dates = [self.string_to_date(date_string) for date_string in date_strings]
            log_file_as_list = self.read_file_to_list(log_file)
            cookies_on_date = self.filter_list_on_dates(log_file_as_list, dates)
            least_active_cookies_on_date = self.get_least_active_cookies(cookies_on_date, show_frequencies)
            return least_active_cookies_on_date
        except FileNotFoundError as f:
            logging.critical(f"File: '{log_file}' not found. Please check the file name and try again.\nExiting.")
            raise FileNotFoundError(f"File: '{log_file}' not found. Please check the file name and try again.\nExiting.")
        return

    def get_least_active_cookies(self, cookie_list: List[str], show_frequencies=False) -> List[str]:
        """Return the least frequently occuring cookies given a list of cookies with frequencies.  

        Call the get_cookie_frequencies().  
        Pass the result to get_min_value_in_dict().  
        Return a list of cookies with frequencies equal to min_frequency.  
        """
        
        cookie_frequency = self.get_cookie_frequencies(cookie_list)
        min_frequency = self.get_min_value_in_dict(cookie_frequency)
        least_common_cookie_list = [cookie[0] if show_frequencies == False else str(f"{cookie[0]}: {cookie[1]}") for cookie in cookie_frequency.items() if cookie_frequency[cookie[0]] == min_frequency]
        return least_common_cookie_list

    def get_most_active_cookies(self, cookie_list: List[str], show_frequencies=False) -> List[str]:
        """Return the most frequently occuring cookies given a list of cookies with frequencies.  

        Call the get_cookie_frequencies().  
        Pass the result to get_max_value_in_dict().  
        Return a list of cookies with frequencies equal to max_frequency.  
        """
        
        cookie_frequency = self.get_cookie_frequencies(cookie_list)
        max_frequency = self.get_max_value_in_dict(cookie_frequency)
        most_common_cookie_list = [cookie[0] if show_frequencies == False else str(f"{cookie[0]}: {cookie[1]}") for cookie in cookie_frequency.items() if cookie_frequency[cookie[0]] == max_frequency]
        return most_common_cookie_list


    def get_min_value_in_dict(self, hashmap: Dict) -> int:
        """Return the Minimum frequency given a dictionary of frequencies.  
        
        Input is a frequency hashmap as generated by get_cookie_frequencies().  
        This function requires that all values in Dict be numerical.
        """

        try:
            max_value = float('INF')
            for key in hashmap.keys():
                if hashmap[key] < max_value:
                    max_value = hashmap[key]
            return max_value
        except ValueError:
            return None


    def most_active_cookie_from_date_list(self, log_file, date_strings, show_frequencies=False):
        try:
            dates = [self.string_to_date(date_string) for date_string in date_strings]
            log_file_as_list = self.read_file_to_list(log_file)
            cookies_on_date = self.filter_list_on_dates(log_file_as_list, dates)
            most_active_cookies_on_date = self.get_most_active_cookies(cookies_on_date, show_frequencies)
            return most_active_cookies_on_date
        except FileNotFoundError as f:
            logging.critical(f"File: '{log_file}' not found. Please check the file name and try again.\nExiting.")
            raise FileNotFoundError(f"File: '{log_file}' not found. Please check the file name and try again.\nExiting.")
        return

    def most_active_cookie_all_dates(self, log_file, show_frequencies=False):
        try:
            log_file_as_list = self.read_file_to_list(log_file)
            most_active_cookies_all_dates = self.get_most_active_cookies(log_file_as_list, show_frequencies)
            return most_active_cookies_all_dates
        except FileNotFoundError as f:
            logging.critical(f"File: '{log_file}' not found. Please check the file name and try again.\nExiting.")
            raise FileNotFoundError(f"File: '{log_file}' not found. Please check the file name and try again.\nExiting.")
        return

    def least_active_cookie_all_dates(self, log_file, show_frequencies=False):
        try:
            log_file_as_list = self.read_file_to_list(log_file)
            least_active_cookies_all_dates = self.get_least_active_cookies(log_file_as_list, show_frequencies)
            return least_active_cookies_all_dates
        except FileNotFoundError as f:
            logging.critical(f"File: '{log_file}' not found. Please check the file name and try again.\nExiting.")
            raise FileNotFoundError(f"File: '{log_file}' not found. Please check the file name and try again.\nExiting.")
        return
        
    def main(self, log_file: str, date_strings: List[str], show_frequencies=False) -> List[str]:
        """Given a cookie log file and a list of dates, output a list of the most active cookies on a specified date.  """

        try:
            dates = [self.string_to_date(date_string) for date_string in date_strings]
            log_file_as_list = self.read_file_to_list(log_file)
            cookies_on_date = self.filter_list_on_dates(log_file_as_list, dates)
            most_active_cookies_on_date = self.get_most_active_cookies(cookies_on_date, show_frequencies)
            return most_active_cookies_on_date
        except FileNotFoundError as f:
            logging.critical(f"File: '{log_file}' not found. Please check the file name and try again.\nExiting.")
            raise FileNotFoundError(f"File: '{log_file}' not found. Please check the file name and try again.\nExiting.")

if __name__ == '__main__':
    cge = CookieGetterExtended()
    cookie_list = cge.main(LOG_FILE_NAME, DATE_STRINGS)
    cge.print_list(cookie_list)

    print("exiting gracefully".upper())
    logging.info("exiting gracefully".upper())